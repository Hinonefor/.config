/*! markmap-cli v0.2.0 | MIT License */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = _interopDefault(require('fs'));
var open = _interopDefault(require('open'));
var parse = _interopDefault(require('markmap/lib/parse.markdown'));
var transform = _interopDefault(require('markmap/lib/transform.headings'));

let template;
async function createMarkmap(options = {}) {
  const {
    input,
    open: openFile = true
  } = options;
  let {
    content,
    output
  } = options;

  if (input) {
    content = await fs.promises.readFile(input, 'utf8');
  }

  if (!output) {
    output = input ? `${input.replace(/\.\w*$/, '')}.html` : 'markmap.html';
  }

  if (!template) {
    template = await fs.promises.readFile(`${__dirname}/../templates/markmap.html`, 'utf8');
  }

  const data = transform(parse(content || ''));
  const html = template.replace('{/* data */}', JSON.stringify(data));
  fs.promises.writeFile(output, html, 'utf8');
  if (openFile) open(output);
}

exports.createMarkmap = createMarkmap;
