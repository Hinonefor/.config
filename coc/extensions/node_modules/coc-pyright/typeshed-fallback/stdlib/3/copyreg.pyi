
from typing import TypeVar, Callable, Type, Union, Tuple, Any, Optional, SupportsInt, Hashable, List


_T = TypeVar("_T")
_Reduce = Union[Tuple[Callable[..., _T], Tuple[Any, ...]], Tuple[Callable[..., _T], Tuple[Any, ...], Optional[Any]]]

__all__: List[str]

def pickle(ob_type: Type[_T], pickle_function: Callable[[Type[_T]], Union[str, _Reduce[_T]]], constructor_ob: Optional[Callable[[_Reduce[_T]], _T]] = ...) -> None: ...
def constructor(object: Callable[[_Reduce[_T]], _T]) -> None: ...
def add_extension(module: Hashable, name: Hashable, code: SupportsInt) -> None: ...
def remove_extension(module: Hashable, name: Hashable, code: int) -> None: ...
def clear_extension_cache() -> None: ...
