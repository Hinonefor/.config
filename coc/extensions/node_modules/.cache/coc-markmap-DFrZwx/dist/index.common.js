/*! coc-markmap v0.1.4 | MIT License */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coc_nvim = require('coc.nvim');
var markmapCli = require('markmap-cli');

function activate(context) {
  const {
    nvim
  } = coc_nvim.workspace;
  context.subscriptions.push(coc_nvim.workspace.registerKeymap(['n'], 'markmap-create', async () => {
    await createMarkmapFromVim(nvim);
  }, {
    sync: false
  }));
  context.subscriptions.push(coc_nvim.workspace.registerKeymap(['v'], 'markmap-create-v', async () => {
    const [[, line1], [, line2]] = await nvim.eval('[getpos("\'<"),getpos("\'>")]');
    await createMarkmapFromVim(nvim, `${line1}`, `${line2}`);
  }, {
    sync: false
  }));
  context.subscriptions.push(coc_nvim.commands.registerCommand('markmap.create', async (line1, line2) => {
    await createMarkmapFromVim(nvim, line1, line2);
  }));
}

async function createMarkmapFromVim(nvim, line1, line2) {
  const content = await getContent(nvim, line1, line2);
  const basename = await nvim.eval('expand("%<")');
  markmapCli.createMarkmap({
    content,
    output: basename && `${basename}.html`
  });
}

async function getContent(nvim, line1 = '1', line2 = '"$"') {
  const lines = await nvim.eval(`getline(${line1},${line2})`);
  return lines.join('\n');
}

exports.activate = activate;
